// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// LeftBack             motor         12              
// RightBack            motor         14              
// LeftFront            motor         13              
// RightFront           motor         18              
// Intake               motor         20              
// Intake2              motor         19              
// Lift1                motor         10              
// ladder               motor         15              
// Controller1          controller                    
// ---- END VEXCODE CONFIGURED DEVICES ----
#include "vex.h" 
using namespace vex;
#include <cmath>
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VCS VEX V5                    */
/*                                                                           */
/*---------------------------------------------------------------------------*/

//Creates a competition object that allows access to Competition methods.
competition Competition;

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */ 
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void sleep(int time){
    vex::task::sleep(time);
}

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

void stop(){
    RightBack.stop();
    RightFront.stop();
    LeftBack.stop();
    LeftFront.stop();
    
}
void auton_drive (int speed, int time){
    LeftBack.spin(vex::directionType::fwd,speed,vex::velocityUnits::rpm);
    LeftFront.spin(vex::directionType::fwd,speed,vex::velocityUnits::rpm);
    RightBack.spin(vex::directionType::rev,speed,vex::velocityUnits::rpm);
    RightFront.spin(vex::directionType::rev,speed,vex::velocityUnits::rpm);
    sleep(time);
    stop();
    
}
void auton_rpm (int speed, float revs){
    

    LeftBack.rotateFor(revs,vex::rotationUnits::rev,speed,vex::velocityUnits::pct, false);
    LeftFront.rotateFor(revs,vex::rotationUnits::rev,speed,vex::velocityUnits::pct, false);
    RightBack.rotateFor(revs,vex::rotationUnits::rev,speed,vex::velocityUnits::pct, false);
    RightFront.rotateFor(revs,vex::rotationUnits::rev,speed,vex::velocityUnits::pct, false);
    //stop();
    
}



void turnCC (int speed, int time){
   
    LeftBack.spin(vex::directionType::fwd,speed,vex::velocityUnits::rpm);
    LeftFront.spin(vex::directionType::fwd,speed,vex::velocityUnits::rpm);
    RightBack.spin(vex::directionType::fwd,-speed,vex::velocityUnits::rpm);
    RightFront.spin(vex::directionType::fwd,-speed,vex::velocityUnits::rpm);
    sleep(time);
    stop();
}

void turnToRight (int speed, int speed2, int time){
   
    LeftBack.spin(vex::directionType::fwd,speed,vex::velocityUnits::rpm);
    LeftFront.spin(vex::directionType::fwd,speed,vex::velocityUnits::rpm);
    RightBack.spin(vex::directionType::fwd,speed2,vex::velocityUnits::rpm);
    RightFront.spin(vex::directionType::fwd,speed2,vex::velocityUnits::rpm);
    sleep(time);
    //stop();
}
float topSpeed = 50.0;
float minSpeed = 0;
float maxAngle = -1391.0;
float minAngle = -41.0;

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous( void ) {
  // ..........................................................................
  // Insert autonomous user code here.
  // ..........................................................................
  //THE WHOLE UNFLODING:::
  
    ladder.rotateTo(-230,vex::rotationUnits::deg,-70,vex::velocityUnits::pct);
    //
    
    
    //LIFT UP
    Lift1.rotateTo(825,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
    sleep(200);
    Lift1.rotateTo(200,vex::rotationUnits::deg,-100,vex::velocityUnits::pct);
    
    //
    Intake.spin(vex::directionType::fwd, -40,vex::velocityUnits::pct);
    Intake2.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
    ladder.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
    
    Lift1.rotateTo(15,vex::rotationUnits::deg,-60,vex::velocityUnits::pct);
    sleep(300);
    Intake.stop();
    Intake2.stop();
    Lift1.stop();
    
    sleep(400);
    
    

  
  
  
    Intake.spin(vex::directionType::fwd, 80,vex::velocityUnits::pct);
    Intake2.spin(vex::directionType::fwd, -80, vex::velocityUnits::pct);
    sleep(100);

    auton_drive(70,1300);
    
    sleep(500);

    Intake.stop();
    Intake2.stop();
    
    auton_rpm(20, 1);
    sleep(1500);
    auton_drive(70,400);

    

    Intake.spin(vex::directionType::fwd, -30,vex::velocityUnits::pct);
    Intake2.spin(vex::directionType::fwd, 30, vex::velocityUnits::pct);
    sleep(475);
    
    
    Intake.stop();
    Intake2.stop();
    
    
    float x = ladder.rotation(vex::rotationUnits::deg);
    float speed = (-(topSpeed - minSpeed)/(maxAngle-minAngle))*(x- minAngle) + topSpeed;
    
    while(x > -850){
          x = ladder.rotation(vex::rotationUnits::deg);
          speed = (-(topSpeed - minSpeed)/(maxAngle-minAngle))*(x- minAngle) + topSpeed;
          ladder.spin(vex::directionType::fwd, -speed, vex::velocityUnits::pct);
          if(x<-600){
            Intake.spin(vex::directionType::fwd, -100,vex::velocityUnits::pct);
            Intake2.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
          }
          
    }
    ladder.stop();
    Intake.stop();
    Intake2.stop();
    sleep(100);
    turnToRight(-70,70, 400);
    stop();
    ladder.rotateTo(-15,vex::rotationUnits::deg,70,vex::velocityUnits::pct);

  

    

    
    
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/



int deadzone(int num){
    
       return 0.5* num*pow(abs(num), 0.75)/(pow(127, 0.75));
       
    
}

void drive_forward() {
    LeftFront.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
    RightFront.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
    LeftBack.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
    RightBack.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
}

void forward_turn(){
    RightBack.spin(vex::directionType::fwd, 0.4*deadzone(Controller1.Axis1.value()) - deadzone(Controller1.Axis3.value()), vex::velocityUnits::pct);
    LeftFront.spin(vex::directionType::fwd, 0.4*deadzone(Controller1.Axis1.value()) + deadzone(Controller1.Axis3.value()), vex::velocityUnits::pct);
    RightFront.spin(vex::directionType::fwd, 0.4*deadzone(Controller1.Axis1.value()) - deadzone(Controller1.Axis3.value()), vex::velocityUnits::pct);
    LeftBack.spin(vex::directionType::fwd, 0.4*deadzone(Controller1.Axis1.value()) + deadzone(Controller1.Axis3.value()), vex::velocityUnits::pct);
}

void forward_slow(){
    RightBack.spin(vex::directionType::fwd, 0.2*deadzone(Controller1.Axis3.value()) - 0.1*deadzone(Controller1.Axis1.value()), vex::velocityUnits::pct);
    LeftFront.spin(vex::directionType::fwd, 0.2*deadzone(Controller1.Axis3.value()) + 0.1*deadzone(Controller1.Axis1.value()), vex::velocityUnits::pct);
    RightFront.spin(vex::directionType::fwd, 0.2*deadzone(Controller1.Axis3.value()) - 0.1*deadzone(Controller1.Axis1.value()), vex::velocityUnits::pct);
    LeftBack.spin(vex::directionType::fwd, 0.2*deadzone(Controller1.Axis3.value()) + 0.1*deadzone(Controller1.Axis1.value()), vex::velocityUnits::pct);
}




void turn(){
    LeftFront.spin(vex::directionType::fwd, (-Controller1.Axis4.value()), vex::velocityUnits::pct);
    RightFront.spin(vex::directionType::fwd, (Controller1.Axis4.value()), vex::velocityUnits::pct);
    LeftBack.spin(vex::directionType::fwd, (-Controller1.Axis4.value()), vex::velocityUnits::pct);
    RightBack.spin(vex::directionType::fwd, (Controller1.Axis4.value()), vex::velocityUnits::pct);

}







void usercontrol( void ) {
  // User control code here, inside the loop
  bool toggle = true;
  bool otherToggle = true;
  bool liftstopped = true;
  bool liftstoppedup = true;

  float topSpeed = 50.0;
  float minSpeed = 0;
  float maxAngle = -1391.0;
  float minAngle = -41.0;
  

  
  

  
  while (1) {
    float x = ladder.rotation(vex::rotationUnits::deg);
    float speed = (-(topSpeed - minSpeed)/(maxAngle-minAngle))*(x- minAngle) + topSpeed;
    //Brain.Screen.print(speed);
    //wait(1, sec);
      
    //Brain.Screen.clearLine();
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo 
    // values based on feedback from the joysticks
     
        

        
        vex::task::sleep(10);
 
      
      
     
    //THIS IS FOR LIFTS:      
     if(Controller1.ButtonX.pressing()){
          Lift1.spin(vex::directionType::fwd, 50, vex::velocityUnits::pct);
          liftstopped = false;
         
          
      }else if(Controller1.ButtonB.pressing()){
          Lift1.spin(vex::directionType::fwd, -90, vex::velocityUnits::pct);
          liftstopped = false;
          
          
      }else if(Controller1.ButtonR2.pressing()){
          sleep(200);
          Lift1.rotateTo(820,vex::rotationUnits::deg,80,vex::velocityUnits::pct, false);
          liftstoppedup = false;
      }else if(Controller1.ButtonR1.pressing()){
          sleep(200);
          Lift1.rotateTo(1180,vex::rotationUnits::deg,80,vex::velocityUnits::pct,false);
          liftstoppedup = false;
      }else if(!(liftstopped)){
          Lift1.stop(vex::brakeType::hold);
          liftstopped = true;
      }
      
      //THIS IS FOR RAMP::
      
      if(Controller1.ButtonUp.pressing()){

          ladder.spin(vex::directionType::fwd, -speed, vex::velocityUnits::pct);
          if(x < -480){
            
            Intake.spin(vex::directionType::fwd, -100,vex::velocityUnits::pct);
            Intake2.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
            wait(5, msec);
           }

          
          toggle = false;
          
      } else if(Controller1.ButtonDown.pressing()){
          ladder.spin(vex::directionType::fwd, 80, vex::velocityUnits::pct);
          toggle = false;
      } else if(Controller1.ButtonRight.pressing()){
          sleep(200);
          ladder.rotateTo(-240,vex::rotationUnits::deg,-70,vex::velocityUnits::pct,false);
          otherToggle = false;
      } else if(!(toggle)){
          ladder.stop(vex::brakeType::hold);
          toggle = true;
      }
      
      
      
      //MODE FOR SlOW:
      
      
      
      

      ///
      ///Intake:
      forward_turn();
      
      //Controller1.Screen.print("Temp: ");
      //Controller1.Screen.print(ladder.temperature(vex::percentUnits::pct));
      //Controller1.Screen.print(" Rot: ");
      //Controller1.Screen.print(round((ladder.rotation(vex::rotationUnits::deg))/10));
      //sleep(10);
      //Controller1.Screen.clearLine(1);
      //ladder.temperature(vex::percentUnits::pct);
      
      
      if(Controller1.ButtonL1.pressing()){
          Intake.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
          Intake2.spin(vex::directionType::fwd, -100, vex::velocityUnits::pct);

      }
      if(Controller1.ButtonL2.pressing()){
          Intake.spin(vex::directionType::fwd, -60, vex::velocityUnits::pct);
          Intake2.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);

      }
      if(x<-480){
          Intake.spin(vex::directionType::fwd, -60, vex::velocityUnits::pct);
          Intake2.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
      }
      if(!(Controller1.ButtonL1.pressing() || Controller1.ButtonL2.pressing() || x < -480)){
          Intake.stop(vex::brakeType::hold);
          Intake2.stop(vex::brakeType::hold);
      }
      
      if(Controller1.ButtonY.pressing()){
            sleep(500);
            ladder.rotateTo(-230,vex::rotationUnits::deg,-80,vex::velocityUnits::pct);
    //
    
    
            //LIFT UP
            Lift1.rotateTo(820,vex::rotationUnits::deg,90,vex::velocityUnits::pct);
            //sleep(200);
            Lift1.rotateTo(200,vex::rotationUnits::deg,-90,vex::velocityUnits::pct);

            //
            Intake.spin(vex::directionType::fwd, -40,vex::velocityUnits::pct);
            Intake2.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            ladder.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);

            Lift1.rotateTo(15,vex::rotationUnits::deg,-60,vex::velocityUnits::pct);
            sleep(300);
            Intake.stop();
            Intake2.stop();
            Lift1.stop();
          
      }
      


    
         
}
      
      
    
      
      
      
    // ........................................................................
    // Insert user code here. This is where you use the joystick values to 
    // update your motors, etc.
    // ........................................................................
 
    vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources. 
  }



//
// Main will set up the competition functions and callbacks.
//
int main() {
    
    //Run the pre-autonomous function. 
    
    
    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );

    
    pre_auton();


    //Prevent main from exiting with an infinite loop.                        
    while(1) {
      wait(100,msec);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
       
}
